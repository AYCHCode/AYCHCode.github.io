<?php /* vim: set noet ts=4 sw=4 ft=php: : */

define("XMLNS_ATOM",  "http://www.w3.org/2005/Atom");
define("XMLNS_XHTML", "http://www.w3.org/1999/xhtml");
define("XMLNS_PHP",   "http://php.net/ns/news");

function date_sort($a, $b) {
	return $a["updated"] == $b["updated"] ? 0 : (strtotime($a["updated"]) > strtotime($b["updated"]) ? -1 : 1);
}

$XML_OPTIONS =  LIBXML_COMPACT | LIBXML_NOBLANKS | LIBXML_NOCDATA | LIBXML_NSCLEAN | LIBXML_XINCLUDE;

function pregen_atom($feed, $feedDest, $newsDest) {
	$entries = format_atom_feed($feed, $y = date("Y"));
	uasort($entries, "date_sort");

	$write = '<?php $NEWS_ENTRIES = ' . var_export($entries, 1) . ';';
	file_put_contents($newsDest, $write);

	do {
		$filename = $feed . $y .".xml";
	} while (!file_exists($filename));
	copy($filename, $feedDest);
}

function format_atom_feed($feed, $year) {
	static $frontpage = 0;
	static $conf = 0;

	// Lets only go back one year
	if ($year < (date("Y")-1)) {
		$frontpage = $conf = 100;
		return array();
	}

	$filename = $feed . $year .".xml";

	// January 1st...
	if (!file_exists($filename)) {
		return format_atom_feed($feed, --$year);
	}

	$r = new XMLReader;
	$r->open($filename, "UTF-8");

	$entries = array();
	while($r->read()) {
		if ($r->nodeType === XMLReader::ELEMENT && $r->name === "entry") {
			$entries[] = $current = format_atom_entry($r);

			// Count the frontpage & conference entries
			foreach($current["category"] as $dog) {
				if ($dog["term"] == "frontpage") {
					++$frontpage;
					break;
				} else {
					++$conf;
				}
			}
		}
	}

	// Make sure we have enough entries to display (shortly after new-year..)
	if (min($frontpage, $conf) < 5) {
		$entries = array_merge($entries, format_atom_feed($feed, --$year));
	}

	return $entries;
}

// {{{ Parse the entry into array(element => value)
function format_atom_entry($r) {
	$retval = array();

	while($r->read()) {
		if ($r->nodeType !== XMLReader::ELEMENT) {
			if ($r->nodeType === XMLReader::END_ELEMENT && $r->name === "entry") {
				return $retval;
			}
			continue;
		}

		$name = $r->localName;
		if ($r->namespaceURI === XMLNS_ATOM) {
			switch($name) {
			case "title":
			case "id":
			case "published":
			case "updated":
				$retval[$name] = $r->readString();
				$retval[$name] = $r->readString();
				break;

			case "link":
			case "category":
				$retval[$name][] = format_attributes($r);
				break;

			case "content":
				if ($r->hasAttributes) {
					switch($r->getAttribute("type")) {
					case "html":
					case "xhtml":
						$str = ltrim($r->readInnerXML());

						// Remove the xmlns attribute
						$search = ' xmlns="'.XMLNS_XHTML.'"';
						if (($pos = strpos($str, $search)) !== false && $pos < 10) {
							$str = substr_replace($str, "", $pos, strlen($search));
						}

						$retval[$name] = $str;
						break;

					case "text":
						$retval[$name] = $r->readString();
						break;
					}
				} else {
					$retval[$name] = $r->readString();
				}
				break;
			}
		} elseif ($r->namespaceURI === XMLNS_PHP) {
			switch($name) {
			case "newsImage":
				$retval[$name] = format_attributes($r);
				$retval[$name]["content"] = $r->readString();
				break;

			case "finalTeaserDate":
				$retval[$name] = $r->readString();
				break;
			}
		}
	}

	return $retval;
} // }}}

// {{{ Return all attrs for current element as an array(attr-name => attr-value)
function format_attributes($r) {
	$retval = array();

	if (!$r->hasAttributes) {
		return $retval;
	}

	$r->moveToFirstAttribute();
	do {
		$retval[$r->localName] = $r->value;
	} while($r->moveToNextAttribute());
	$r->moveToElement();

	return $retval;
} // }}}

function legacy_rss($atom, $newsDest, $confDest) {
	$sxe = new SimpleXMLElement($atom, $GLOBALS["XML_OPTIONS"], true);
	$CONF = $CONF_ITEMS = $NEWS = $NEWS_ITEMS= "";
	$links = array();

	foreach($sxe->entry as $entry) {
		$item = "";
		$term  = (string)$entry->category["term"];
		$type = $term != "frontpage" ? "conf" : "news";
		GenerateRSSItem(
			$links[$type][]["link"] = "http://www.php.net" .$entry->link["href"],
			(string)$entry->title,
			ProcessText($entry->content->asXML()),
			date("Y-m-d", strtotime((string)$entry->updated)),
			$type == "conf" ? ($term == "conferences" ? "conference" : $term): null,
			$item
		);
		if($type == "conf") {
			$CONF_ITEMS .= $item;
		} else {
			$NEWS_ITEMS .= $item;
		}
	}
	GenerateRSSHeader($links["conf"], $CONF, "http://www.php.net/conferences/");
	GenerateRSSHeader($links["news"], $NEWS, "http://www.php.net/");

	$CONF .= $CONF_ITEMS;
	$NEWS .= $NEWS_ITEMS;

	GenerateRSSFooter($CONF);
	GenerateRSSFooter($NEWS);

	file_put_contents($newsDest, $NEWS);
	file_put_contents($confDest, $CONF);
}

