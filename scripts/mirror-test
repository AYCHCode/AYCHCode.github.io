#!/usr/bin/env php
<?php # vim: ft=php et
// This script is executed on master

/*
 Check the state of each mirror site, and store the
 current data in the database. This data is then used
 to generate the official mirror listing with deactived
 mirrors delisted. The gathered information is also
 mailed to the php-mirrors mailing list periodically
 by the mirror-summary script, and the maintainers also
 get notices of deactivations weekly.
*/

// This script will run for a long time
set_time_limit(30 * 60);


function lap() {
	static $then = 0;
	static $now;

	$now = microtime(true);
	$ret = $now - $then;
	$then = $now;
	return $ret;
}
function isDebug() {
	return getenv("PHPWEBDEV") || file_exists(".DEV");
}
function p($msg) {
	return fprintf(STDERR, "%s", $msg);
}
function email($address, $subject, $content) {
	if (isDebug()) {
		return fprintf(STDERR, "\n\nMailed %s -- %s\n%s\n\n", $address, $subject, $content);
	}

	$headers = "From: mirrors@php.net";
	$extrah  = "-fnoreply@php.net";
	return mail($address, $subject, $content, $headers, $extrah);
}
function emailMirror($row, $problem) {
	$subject = "{$row["hostname"]} Disabled";
	$content = <<<EOF
Dear {$row["maintainer"]}

The mirror you are maintaing for php.net ({$row["hostname"]}) has been disabled
due to:

	$problem


For more information please checkout our mirroring-troubles page:
http://{$row["hostname"]}/mirroring-troubles.php

Please resolve this issue ASAP. If the reason is unclear, please contact
php-mirrors@lists.php.net

- php.net mirror surveillance

EOF;
	email($row["maintainer"], $subject, $content);
}
function MIRRORINFO($row, $content) {
	$RETURN = [];

	/* Parse our mirror configuration from /mirror-info */
	$info = explode("|", trim($content));

	if (count($info) != 11) {
		FAIL($row, "/mirror-info", "Invalid data received. See: http://php.net/mirroring-troubles.php#invalid-data\n", $row["cname"]);
		return false;
	}

	if (preg_match("@^\d+\.\d+\.\d+@", $info[1], $matches)) {
		$RETURN["phpversion"] = $matches[0];
	} else {
		FAIL($row, "/mirror-info|version", "Doesn't look like PHP version", $row["cname"]);
		return false;
	}

	if (!version_compare($RETURN["phpversion"], "5.3.3", "ge")) {
		FAIL($row, "/mirror-info|version", "Running pre 5.3.3", $row["cname"]);
		return false;
	}

	$RETURN["mirrorupdated"] = (int)$info[2];
	$RETURN["has_search"]    = (int)$info[3];
	$RETURN["has_stats"]     = (int)$info[4];

	if ($RETURN["mirrorupdated"] < strtotime("6 hours ago")) {
		FAIL($row, "/mirror-info|stale", "Stale mirror, not been updated for a while", $row["cname"]);
		return false;
	}
	// If language value is SQL safe, update it
	if (preg_match("!^[a-zA-Z_]+$!", $info[5])) {
		$RETURN["lang"] = $info[5];
	} else {
		FAIL($row, "/mirror-info|lang", "Invalid language string", $row["cname"]);
		return false;
	}
  
	if (!(bool)$info[7]) {
		FAIL($row, "/mirror-info|rsync", "Rsync setup problems, see /mirroring.php.", $row["cname"]);
		return false;
	}


	// Get the list of available extensions on the mirror
	$RETURN["ext_avail"] = (string)$info[8];
	// Get the system"s local hostname
	$RETURN["local_hostname"] = (string)$info[9];
	// Get the system"s IP address
	$RETURN["ipv4_addr"] = (string)$info[10];

	// Check if mirror has correct ServerName/ServerAlias entries
	// Most likely cause is unofficial hostname as ServerName instead of ServerAlias
	// Important to keep my php.net cookie around
	$mysite = parse_url($info[0]);
	if (!$mysite) {
		FAIL($row, "/mirror-info|parsing", "Can't parse URL from mirror-info", $row["cname"]);
		return false;
	}
	if ($mysite["host"] != $row["hostname"]) {
		$errmsg = "Apache ServerName directive does not match '{$row['hostname']}'."
			. " Consider swapping ServerName and ServerAlias, see /mirroring.php.";
		FAIL($row, "/mirror-info|hostname", $errmsg, $row["cname"]);
		return false;
	}

	return $RETURN;
}

function bfetch($url, $ctx, &$headers) {
	lap();

	$content = file_get_contents($url, false, $ctx);

	$base = basename($url);
	if (strpos($base, "?")) {
		$base = strstr($base, "?", true);
	}
	$msg = sprintf("\t%s: %.2f", $base, lap());
	p($msg);

	if ($content) {
		$headers = $http_response_header;
	} else {
		$headers = [];
	}

	return $content;
}

function fetch($host, $filename, $ashostname = NULL, &$headers = []) {
	$opts = [
		"user_agent"    => "PHP.net Mirror Site check",
		"max_redirects" => 0,
		"timeout"       => 15,
		"ignore_errors" => "1",
		"header"        => [
			"Host: " . ($ashostname ?: $host),
			"Connection: close",
		],
	];
	$ctx = stream_context_create(["http" => $opts]);


	$url = "http://$host$filename";

	$content = bfetch($url, $ctx, $headers);

	return $content;
}

function HTTPCODE($headers, $code) {
	$code = strtolower($code);
	foreach($headers as $header) {
		if (strpos(strtolower($header), $code) !== false) {
			return true;
		}
	}

	return false;
}
function FAIL($mirror, $check, $reason, $testhost) {
	global $pdo;

	// Try to extract something reasonable out of the content
	$reason = htmlentities(substr(str_replace("\n", "", strip_tags($reason)), 0, 128));

	switch($check) {
	case "/mirror-info|version":
		$help = "Your PHP version is too old";
		$help .= "\n\n\tTest URL: http://$testhost/mirror-info\n";
		break;
	case "/mirror-info|stale":
		$help = "Please run rsync on hourly basis";
		$help .= "\n\n\tTest URL: http://$testhost/mirror-info\n";
		break;
	case "/mirror-info|lang":
		$help = "Unknown language";
		$help .= "\n\n\tTest URL: http://$testhost/mirror-info\n";
		break;
	case "/mirror-info|rsync":
		$help = "Rsync issues";
		$help .= "\n\n\tTest URL: http://$testhost/mirror-info\n";
		break;
	case "/mirror-info|hostname":
		$help = "Please make sure your ServerName is configured correctly";
		$help .= "\n\n\tTest URL: http://$testhost/mirror-info\n";
		break;

	case "www.php.net":
		$help = "Does not answer to www.php.net. ";
		$help .= "www.php.net is now experimenting with GeoDNS and we have requested all mirrors to add www.php.net as ServerAlias. ";
		$help .= "Please see:";
		$help = wordwrap($help, 75, "\n\t");
		$help .= " http://grokbase.com/t/php/php-mirrors/15190w93m0/www-php-net-over-geodns-please-update-your-serveralias\n";
		break;

	case "cc.php.net":
		$help = "Does not answer to country-code.php.net";
		break;

	case "/manual/noalias.txt":
		$help = "Apache manual alias. See: http://php.net/mirroring-troubles.php#manual-redirect";
		$help .= "\n\n\tTest URL: http://$testhost/$check\n";
		break;

	case "/manual/en/faq.html.php":
		$help = "Content-Type. See: http://php.net/mirroring-troubles.php#content-type";
		$help .= "\n\n\tTest URL: http://$testhost/$check\n";
		break;

	case "/functions":
		$help = "MultiViews on. See: http://php.net/mirroring-troubles.php#multiviews";
		$help .= "\n\n\tTest URL: http://$testhost/$check\n";
		break;

	case "/manual/en/ref.var.php":
		$help = "Var Handler. See: http://php.net/mirroring-troubles.php#var";
		$help .= "\n\n\tTest URL: http://$testhost/$check\n";
		break;

	case "/results.php?q=example&p=manual&l=en":
		$help = "Outbound connections appear disabled. See: http://php.net/mirroring-troubles.php#outbound";
		$help .= "\n\n\tTest URL: http://$testhost/$check\n";
		break;

	default:
		$help = "";
	}

	$errmsg = "Failed '$check' check: $reason\n\nLikely cause:\n\t$help";

	$query = "
UPDATE mirrors SET
	ocmt = :reason,
	lastchecked = NOW()
WHERE id = :id
";
	$stmt = $pdo->prepare($query);

	$params = [
		":reason"      => $errmsg,
		":id"          => $mirror["id"],
	];

	/* Mail the maintainer right away if it wasn't disabled already */
	if (!$mirror["ocmt"]) {
		emailMirror($mirror, $errmsg);
	}

	$stmt->execute($params);
	p("\n");
}

function UPDATE($mirror, $info) {
	global $pdo;

	$query = "
UPDATE mirrors SET
	lastchecked = NOW(),
	lastupdated = FROM_UNIXTIME(:lastupdated),
	has_search = :has_search,
	has_stats = :has_stats,
	phpversion = :phpversion,
	lang = :lang,
	ocmt = :ocmt,
	ext_avail = :ext_avail,
	local_hostname = :local_hostname,
	ipv4_addr = :ipv4_addr
WHERE id = :id
";

	$stmt = $pdo->prepare($query);
	$params = [
		":lastupdated"    => (int)$info["mirrorupdated"],
		":has_search"     => (int)$info["has_search"],
		":has_stats"      => (int)$info["has_stats"],
		":phpversion"     => $info["phpversion"],
		":lang"           => $info["lang"],
		":ocmt"           => "",
		":ext_avail"      => $info["ext_avail"],
		":local_hostname" => $info["local_hostname"],
		":ipv4_addr"      => $info["ipv4_addr"],
		":id"             => $mirror["id"],
	];
	$stmt->execute($params);
}

function GEOLS() {
	p(GEOLS. "\n");
	$json = file_get_contents(GEOLS);

	if ($json) {
		return json_decode($json, true);
	}

	return [];
}

function GEORM($id) {
sleep(1);

	$opts = [
		"user_agent"    => "PHP.net Mirror Site check",
		"timeout"       => 15,
		"ignore_errors" => "1",
		"method"        => "DELETE",
	];

	$ctx = stream_context_create(["http" => $opts]);
	$retval = file_get_contents(sprintf(GEORM, $id), false, $ctx);

	p($retval);
	p("Removed $id\n");
}

function GEOADD($cname, $country) {
sleep(1);
	$countries = include __DIR__ . "/countries.inc";

	if (!isset($countries[$country])) {
		p("Can't find country code for $country\n");
		return;
	}

	$data = [
		"domain"     => ZONE,
		"host"       => "@",
		"ttl"        => 0,
		"geozone_id" => $countries[$country],
		"prio"       => 0,
		"type"       => "CNAME",
		"rdata"      => $cname,
	];
	$opts = [
		"user_agent"    => "PHP.net Mirror Site check",
		"timeout"       => 15,
		"ignore_errors" => "1",
		"method"        => "PUT",
		"header"        => "Content-type: text/x-javascript",
		"content"       => $t = json_encode($data),
	];
	$ctx = stream_context_create(["http" => $opts]);
	$retval = file_get_contents(GEOADD, false, $ctx);
	p("Adding $cname => " . GEOADD . ": $t\n");
	p($retval);
}

function geoDNS($HOSTS) {
	$GEOLIST = GEOLS();
	if (!$GEOLIST) {
		p("Not updating EasyDNS GeoDNS, couldn't get the list!\n");
	}
	$HOSTS["php-web2.php.net."] = "North America";

	/* Remove disabled hosts */
	$GEO = [];
	foreach($GEOLIST["data"] as $k => $entry) {
		/* Only deal with records we have declared as GEO */
		if (empty($entry["geozone_id"])) {
			p("No GEOZONE_ID set for {$entry["rdata"]}\n");
			continue;
		}

		if (empty($HOSTS[$entry["rdata"]])) {
			unset($HOSTS[$entry["rdata"]]);
			p("{$entry["rdata"]} not a current host\n");
			GEORM($entry["id"]);
		} else {
			p("{$entry["rdata"]} is current host\n");
			$GEO[$entry["rdata"]] = $entry["id"];
		}
	}

	p("Now using mirror-check\n");
	foreach($HOSTS as $cname => $country) {
		if (isset($GEO[$cname]) && $country) {
			/* CNAME listed in GEO zone and is enabled in our system */
			continue;
		}
		
		if ($country) {
			/* CNAME enabled in our system, make new zone record for it */
			GEOADD($cname, $country);
			continue;
		} elseif (isset($GEO[$cname])) {
			/* CNAME disabled in our system, remove the zone record for it */
			GEORM($GEO[$cname]);
		} else {
			/* CNAME disabled in our system, and no zone record for it */
			continue;
		}
		
	}
}

$pdo = new PDO("mysql:host=localhost;dbname=phpmasterdb", "nobody", "");


// Get mirror information for all mirrors (except our special mirrors, such as www and docs)
$query = "SELECT mirrors.id, cc, hostname, cname, maintainer, load_balanced, ocmt, country.alpha2 FROM mirrors,country WHERE mirrortype = 1
-- AND hostname IN('us1.php.net', 'us2.php.net', 'ca3.php.net', 'ua1.php.net', 'uk3.php.net')
AND mirrors.cc=country.id
ORDER BY hostname";
$stmt = $pdo->prepare($query);
$stmt->execute();


$HOSTS = [];
while($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
	$timeoutfail = 0;
	p($row["hostname"]);
	$HOSTS[$row["cname"]."."] = false;


	$filename = "/manual/noalias.txt";
	$content = fetch($row["cname"], $filename, null, $headers);

	if ($content != "manual-noalias") {
		if (!$headers && $timeoutfail < 2) {
			$timeoutfail++;
		} else {
			FAIL($row, "/manual/noalias.txt", "Expected 'manual-noalias', got '$content'", $row["cname"]);
			continue;
		}
	}

	/* GeoDNS for www.php.net */
	$content = fetch($row["cname"], $filename, "www.php.net", $headers);
	if ($content != "manual-noalias") {
		if (!$headers && $timeoutfail < 2) {
			$timeoutfail++;
		} else {
			FAIL($row, "www.php.net", "Couldn't fetch $filename from www.php.net", "www.php.net");
			continue;
		}
	}

	/* Round-robin for country-code.php.net */
	if ($row["load_balanced"]) {
		$content = fetch($row["cname"], $filename, $row["load_balanced"] . ".php.net", $headers);
		if ($content != "manual-noalias") {
			if (!$headers) {
				$timeoutfail++;
			} else {
				FAIL($row, "cc.php.net", "Couldn't fetch $filename from {$row["load_balanced"]}.php.net", "{$row["load_balanced"]}.php.net");
				continue;
			}
		}
	}


	/* bug#26840 Content negotiation screwups; ".html.php" */
	$content = fetch($row["cname"], "/manual/en/faq.html.php", $row["hostname"], $headers);
	if (!$content) {
		if (!$headers && $timeoutfail < 2) {
			$timeoutfail++;
		} else {
			FAIL($row, "/mirror-info", "Received no response in 15 seconds", $row["hostname"]);
			continue;
		}
	}
	if (!HTTPCODE($headers, "200 OK")) {
		FAIL($row, "/mirror-info", "Expected 200 OK -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}
	if (!HTTPCODE($headers, "Content-Type: text/html")) {
		FAIL($row, "/manual/en/faq.html.php", "Expected Content-Type: text/html -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}
	
	/* bug#31852 Apache multiviews */
	$content = fetch($row["cname"], "/functions", $row["hostname"], $headers);
	if (!$content) {
		if (!$headers && $timeoutfail < 2) {
			$timeoutfail++;
		} else {
			FAIL($row, "/mirror-info", "Received no response in 15 seconds", $row["hostname"]);
			continue;
		}
	}
	if (!HTTPCODE($headers, "200 OK")) {
		FAIL($row, "/functions", "Expected 200 OK -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}
	if (!HTTPCODE($headers, "Content-Type: text/html")) {
		FAIL($row, "/functions", "Expected Content-Type: text/html -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}

	/* bug#35970 `var` handler */
	$content = fetch($row["cname"], "/manual/en/ref.var.php", $row["hostname"], $headers);
	if (!$content) {
		if (!$headers && $timeoutfail < 2) {
			$timeoutfail++;
		} else {
			FAIL($row, "/mirror-info", "Received no response in 15 seconds", $row["hostname"]);
			continue;
		}
	}
	if (!HTTPCODE($headers, "200 OK")) {
		FAIL($row, "/manual/en/ref.var.php", "Expected 200 OK -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}
	if (!HTTPCODE($headers, "Content-Type: text/html")) {
		FAIL($row, "/manual/en/ref.var.php", "Expected Content-Type: text/html -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}

	/* bug#46423 outbound connections for internal search */
	$content = fetch($row["cname"], "/results.php?q=example&p=manual&l=en", $row["hostname"], $headers);
	if (!$content) {
		if (!$headers && $timeoutfail < 2) {
			$timeoutfail++;
		} else {
			FAIL($row, "/mirror-info", "Received no response in 15 seconds", $row["hostname"]);
			continue;
		}
	}
	if (!HTTPCODE($headers, "200 OK")) {
		FAIL($row, "/manual/en/ref.var.php", "Expected 200 OK -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}
	if (!HTTPCODE($headers, "Content-Type: text/html")) {
		FAIL($row, "/manual/en/ref.var.php", "Expected Content-Type: text/html -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}


	$content = fetch($row["cname"], "/mirror-info", $row["hostname"], $headers);
	if (!$content) {
		if (!$headers && $timeoutfail < 2) {
			$timeoutfail++;
		} else {
			FAIL($row, "/mirror-info", "Received no response in 15 seconds", $row["hostname"]);
			continue;
		}
	}
	if (!HTTPCODE($headers, "200 OK")) {
		FAIL($row, "/mirror-info", "Expected 200 OK -- got:\n\t" . join("\n\t", $headers), $row["hostname"]);
		continue;
	}
	if ($info = MIRRORINFO($row, $content)) {
		UPDATE($row, $info);
		$HOSTS[$row["cname"]."."] = $row["alpha2"];
	}
	p("\n");
}

if ($creds = getenv("EASYDNS_CREDENTIALS")) {
	$GEOROOT = "https://{$creds}@rest.easydns.net";
	define("ZONE", "www.php.net");
	define("GEOLS",  "$GEOROOT/zones/records/all/" . ZONE . "?format=json");
	define("GEORM",  "$GEOROOT/zones/records/" . ZONE . "/%s?format=json");
	define("GEOADD", "$GEOROOT/zones/records/add/" . ZONE . "/CNAME?format=json");
	geoDNS($HOSTS);
} else {
	p("Not updating EasyDNS GeoDNS, No credentials provided");
}

