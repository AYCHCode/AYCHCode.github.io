#!/local/php5/bin/php -q
<?php # vim: ft=php et
// This script is executed on master

/*
 Check the state of each mirror site, and store the
 current data in the database. This data is then used
 to generate the official mirror listing with deactived
 mirrors delisted. The gathered information is also
 mailed to the php-mirrors mailing list periodically
 by the mirror-summary script, and the maintainers also
 get notices of deactivations weekly.
 
 TODO: notify a maintainer 24 hours before his mirror
       gets delisted
*/

// This script will run for a long time
set_time_limit(30 * 60);

// Connect to local MySQL database
mysql_connect("localhost", "nobody", "") or die("unable to connect to database");
mysql_select_db("phpmasterdb");

// Get mirror information for all active mirrors (regardless of their type!)
$query = "SELECT maintainer, hostname, id, has_search, has_stats, lang,
          UNIX_TIMESTAMP(lastchecked) as lastchecked,
          UNIX_TIMESTAMP(lastupdated) AS lastupdated
          FROM mirrors WHERE active = 1";
$result = mysql_query($query) or die("unable to get from the database: " . mysql_error());

// Get all mirror site data to the $hosts array
$hosts = array();
while ($row = mysql_fetch_array($result)) {
    $hosts[] = $row;
}

// Free up the result to get more memory
mysql_free_result($result);

// Check host for errors, inject data into $data and $problem
function host_has_error($hostname, $filename, &$data, &$problem) {

    // Open port 80 on the mirror site
    $fp = @fsockopen($hostname, 80, $errno, $errstr, 15);
    
    // If we were unable to open the port, continue with the next mirror
    if (!$fp) {
        $problem = "Unable to connect.";
        return TRUE;
    }

    // GET the page from the registered hostname
    $rc = fputs($fp, "GET $filename HTTP/1.0\r\n" .
                     "Host: {$hostname}\r\n" .
                     "User-Agent: PHP.net Mirror Site Check\r\n\r\n");
    
    // If we were unable to write to socket, skip mirror site
    if ($rc === FALSE) {
        $problem = "Unable to send request.";
        return TRUE;
    }
    
    // Set timeout to 5 seconds
    socket_set_timeout($fp, 5, 0);

    // Get lines from the socket, until we get past the HTTP headers
    // (HTTP headers and data have one empty line between them)
    do {
        $line = fgets($fp);
    } while ($line !== FALSE && $line != "" && $line != "\r\n" && $line != "\n");

    // If we were unable to pass the HTTP headers, skip mirror site
    if ($line === FALSE || $line == "") {
        $problem = "Unable to get past HTTP response headers. Probably timeout.";
        return TRUE;
    }
        
    // Get data row from socket
    $data = fgets($fp);

    // Close socket
    fclose($fp);

    // If unable to read that row, skip mirror site
    if ($data === FALSE) {
        $problem = "Unable to get data. Probably timeout.";
        return TRUE;
    }
    
    return FALSE;
}

// Set default context options
$opts = array(
    "user_agent"    => "PHP.net Mirror Site check",
    "max_redirects" => 0,
    "timeout"       => 5,
);
$context  = stream_context_get_default(array("http" => $opts));

// Get all mirror sites, and count the index of them
foreach ($hosts as $index => $host) {

    // Request the exact file on www.php.net as it redirects
    // shortcut requests to a mirror site, and we would not handle
    // that properly. Otherwise on a mirror site we need to check
    // the shortcut functionality too.
    $filename = ($host['hostname'] == 'www.php.net') ? '/mirror-info.php' : '/mirror-info';

    // -------------------------------------------------------------------------
    // First HTTP request for the mirror-info file
    $data = $problem = '';
    if (host_has_error($host['hostname'], $filename, $data, $problem)) {
      $hosts[$index]['disable'] = true;
      $hosts[$index]['problem'] = $problem;
      continue;
    }

    // Explode information row by delimiter
    $info = explode("|", trim($data));

    // Invalid data received, skip mirror site
    if (count($info) < 8) {
        // This is a *serious* error, disable it!
        $hosts[$index]['disable'] = true;
        $hosts[$index]['problem'] = "Invalid data received. Probably improper ErrorHandler, see /mirroring.php.";
        continue;
    }
    
    // Put pieces into the $hosts array
    if (preg_match("@^\d+\.\d+\.\d+@", $info[1], $matches)) {
        $hosts[$index]['phpversion'] = $matches[0];
    } else {
        $hosts[$index]['phpversion'] = 'Unknown';
    }
    
    // The last updated date is a number [db security]
    if (is_numeric($info[2])) {
        $hosts[$index]['mirrorupdated'] = $info[2];
    } else {
        $hosts[$index]['disable'] = true;
        $hosts[$index]['problem'] = "Invalid last update time.";
    }
    
    // If new search information is available, override previous one
    /*if (in_array($info[3], array('0', '1', '2'))) {
        $hosts[$index]['has_search'] = $info[3];
    }*/
    // Abuse the "has_search" SQL field to check for SQLite availability
    if (in_array($info[3], array('0', '1'))) {
        $hosts[$index]['has_search'] = $info[3];
    }
    // Update stats availability info 
    if (in_array($info[4], array('0', '1'))) {
        $hosts[$index]['has_stats'] = $info[4];
    }

    // If language value is SQL safe, update it
    if (preg_match("!^[a-zA-Z_]+$!", $info[5])) {
        $hosts[$index]['lang'] = $info[5];
    }
    
    // Set mirror's lastupdated time to a default,
    // thus deactivating it in case of a manual
    // alias is in effect
    /*if ($info[6] == "manual-alias") {
        $hosts[$index]['lastupdated'] = '0';
        $hosts[$index]['problem'] = "Apache manual alias in effect, see /mirroring.php.";
        continue;
    }*/
    
    // Check that the mirror has all the mirror settings updated
    if ($info[7] != '1') {
      $hosts[$index]['problem'] = "Rsync setup problems, see /mirroring.php.";
      continue;
    }

    // Check if mirror has correct ServerName/ServerAlias entries
    // Most likely cause is unofficial hostname as ServerName instead of ServerAlias
    // Important to keep my php.net cookie around
    $mysite = parse_url($info[0]);
    if (is_array($mysite)) {
        $mysite = $mysite['host'];
    }

    if (!$mysite || $mysite != $host['hostname']) {
        $hosts[$index]['problem'] = "Apache ServerName directive does not match '{$host['hostname']}'."
         . " Consider swapping ServerName and ServerAlias, see /mirroring.php.";
        continue;
    }

    // -------------------------------------------------------------------------
    // Second HTTP request, checking for Apache manual alias
    $data = $problem = '';
    if (host_has_error($host['hostname'], '/manual/noalias.txt', $data, $problem)) {
        $hosts[$index]['disable'] = true;
        $hosts[$index]['problem'] = $problem;
        continue;
    }
    if (trim($data) != 'manual-noalias') {
        $hosts[$index]['disable'] = true;
        $hosts[$index]['problem'] = "Apache manual alias in effect, see /mirroring.php.";
        continue;
    }

    // -------------------------------------------------------------------------
    // Third HTTP request, checking for known problems that has been hunting
    // some mirrors for years (See bug#26840)
    $url = "http://{$host['hostname']}/manual/en/faq.html.php";
    $headers = get_headers($url, 1);
    if($headers == false) {
        /* Possibly timed out, lets let it slight for now */
        continue;
    }
    
    // No. This is not a joke. Some mirrors (*hint*tw.php.net*hint*) return
    // "Content-type" for instance, not "Content-Type"
    $headers = array_change_key_case($headers, CASE_LOWER);

    if(strpos($headers[0], "200") === false) {
        $hosts[$index]['disable'] = true;
        $hosts[$index]['problem'] = "Header weirdness. Pages named '.html.php' are returning wrong status headers\n";
        $hosts[$index]['problem'].= "Your mirror is currently returning '{$headers[0]}', not '200 OK'\n";
        $hosts[$index]['problem'].= "(The test was ran on $url)";
        continue;
    }
    if (strpos($headers["content-type"], "text/html") === false) {
        $hosts[$index]['disable'] = true;
        $hosts[$index]['problem'] = "Content-Type weirdness. Pages named '.html.php' are returning wrong Content-Type headers\n";
        $hosts[$index]['problem'].= "Should be returning 'text/html' but are returning '{$headers["content-type"]}'\n";
        $hosts[$index]['problem'].= "(The test was ran on $url)";
        continue;
    }

    // -------------------------------------------------------------------------
    // Fourth HTTP request, checking for apache MultiViews configuration
    // (See bug#31852)

    $url = "http://{$host['hostname']}/functions";
    $headers = get_headers($url, 1);
    if($headers == false) {
        // Probably timed out, let it slight for now
        continue;
    }
    $headers = array_change_key_case($headers, CASE_LOWER);

    if (strpos($headers["content-type"], "text/html") === false) {
        $hosts[$index]['disable'] = true;
        $hosts[$index]['problem'] = "MultiViews on. See the *updated* mirror guidelines at http://{$host['hostname']}/mirroring\n";
        $hosts[$index]['problem'].= "(The test was ran on $url and should return the function language reference)";
        continue;
    }

    // -------------------------------------------------------------------------
    // Fifth HTTP request, checking for `var` handler
    // (See bug#35970)

    $url = "http://{$host['hostname']}/manual/en/ref.var.php";
    $headers = get_headers($url, 1);
    if($headers == false) {
        // Probably timed out, let it slight
        continue;
    }

    if(strpos($headers[0], "200 OK") === false) {
        $hosts[$index]['disable'] = true;
        $hosts[$index]['problem'] = "Please follow our mirror guidelines. You need to remove the 'var' handler\n";
        $hosts[$index]['problem'].= "(The test was ran on $url and should return 'variable handling functions')";
        continue;
    }

}

// Go through all mirror sites checked
$mirrorsupdated = 0; $problems = "";
$four_days_ago = strtotime("-4 days");
foreach ($hosts as $host) {
    
    // If a "problem" is not specified, then we were able to check
    // the mirror, so the mirror data can be updated, and the old
    // error message need to be removed. Otherwise the previous data
    // need to be kept.
    if (!isset($host['problem'])) {
        
        $query = "UPDATE mirrors SET " .
                 "lastchecked = NOW(), " .
                 "lastupdated = FROM_UNIXTIME(" . $host['mirrorupdated'] . "), " .
                 "has_search = '" . ((int) $host['has_search'])     . "', " .
                 "has_stats = '"  . ((int) $host['has_stats'])      . "', " .
                 "phpversion = '" . addslashes($host['phpversion']) . "', " .
                 "lang = '"       . $host['lang']                   . "', " .
                 "ocmt = '' " .
                 "WHERE hostname = '" . $host['hostname'] . "'";
                  
        $result = mysql_query($query) or die("unable to update the database: $query: " . mysql_error());
        if ($result) { $mirrorsupdated++; }
        else { $problems .= $host['hostname'] . "\t- cannot be updated in database\n"; }
    }

    // Store the problem encountered in the database, and collect
    // all the problems into one string in case it will be mailed
    else {
        if(isset($host['disable']) && $host['disable'] === true) {
            $query = "UPDATE mirrors SET ocmt = '" . addslashes($host['problem']) . "', " .
                     "lastchecked = FROM_UNIXTIME($four_days_ago), " .
                     "lastupdated = FROM_UNIXTIME(" . $host['lastupdated'] . ") " .
                     "WHERE hostname = '" . $host['hostname'] . "'";
        } else {
        $query = "UPDATE mirrors SET ocmt = '" . addslashes($host['problem']) . "', " .
                 "lastupdated = FROM_UNIXTIME(" . $host['lastupdated'] . ") " .
                 "WHERE hostname = '" . $host['hostname'] . "'";
        }
        $result = mysql_query($query) or die("unable to update the database: $query: " . mysql_error());
        $problems .= $host['hostname'] . "\t- " . $host['problem'] . "\n";
    }

}
