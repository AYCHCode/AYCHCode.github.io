#!/usr/local/bin/php5 -q
<?php /* vim: set noet ts=2 sw=2 ft=php: : */

// We protect the master server with this token, so
// only who knows the token can fetch data from the server
$token = getenv("TOKEN");
if (!$token) die("you have to set the TOKEN environment variable");
$token = rawurlencode($token);

// We need the root path for phpweb to write the data there
if (!$argv[1]) die("usage: $argv[0] directory\n");
$root = $argv[1];

// This script may run for a long time,
// due to remote data fetching
set_time_limit(30 * 60);

// Get list of mirror sites
fetch_into_file("http://master.php.net/fetch/mirrors.php?token=$token",
                "$root/include/mirrors.inc");

// Get list of countries
fetch_into_file("http://master.php.net/fetch/countries.php?token=$token",
                "$root/include/countries.inc");


// Get list of upcoming events
fetch_into_file("http://master.php.net/fetch/events.php?token=$token",
                "$root/backend/events.csv");

// Pregenerate event listing sidebar for homepage
include "event_listing";
// If we are in the first days of the month then only list current month
$months = (date('j') < 10) ? 1:2;
pregenerate_events("$root/backend/events.csv", "$root/include/pregen-events.inc", $months);


// Run ip-to-country fetch code
include "ip-to-country";
fetch_ip_to_country($root);

include "pregen_news";
pregen_atom("$root/archive/", "$root/feed.atom", "$root/include/pregen-news.inc");
include "rss_parser";
legacy_rss("$root/feed.atom", "$root/news.rss", "$root/conferences/news.rss");

// Pregenerate conference teaser
include "conference_teaser";
pregenerate_conf_teaser("$root/feed.atom", "$root/include/pregen-confs.inc");

// Pregenerate version feed
include "php_version";
pregenerate_version_feed("$root/include/version.inc", "$root/include/releases.inc", "$root/releases.atom");

// Pregenerate the reST files
include "rest_render";
/* URLs to parse/render */
$urls = array(
	'php-src/CODING_STANDARDS',
	'php-src/README.CVS-RULES',
	'php-src/README.RELEASE_PROCESS',
);
pregen_rest_files("$root/reST/cache/", $urls);


// Compress mirrorkit dir in backend to mirrorkit.tgz, and
// then move it to the webspace in case it is properly done
chdir("$root/backend/mirrorkit");
$output = `tar --exclude=CVS --exclude=mirrorkit.tgz -czf mirrorkit.tgz *`;
if (strlen($output)) { die("Mirrorkit compression error: $output"); }
if (@file_exists('mirrorkit.tgz')) {
    rename('mirrorkit.tgz', "$root/mirrorkit.tgz");
}

// Fetch data into a temporary file first, and then
// overwrite the real file with the new data
function fetch_into_file($url, $file)
{
    // Open URL for reading
    $source = @fopen($url, "r");
    if (!$source) {
        return;
    }

    // Open temporary file for writing
    $dest = @fopen("$file~", "w");
    if (!$dest) {
        echo "failed to open '$file~' for writing\n";
        return;
    }

    // Read until $source provides data, and write
    // out the chunk to the output file if possible
    while (!feof($source)) {
        $chunk = fread($source, 4096);
        if (fwrite($dest, $chunk) < 0) {
            fclose($source);
            fclose($dest);
            unlink("$file~");
            echo "failed writing to '$file~'\n";
            return;
        }
    }
    fclose($source);
    fclose($dest);

    // If we don't have new data, delete file
    if (!@filesize("$file~")) {
        echo "'$file~' was empty, skipping\n";
        unlink("$file~");
        return;
    }

    // Replace real file with temporary file
    return rename("$file~", $file);
}

